// Auto-generated TypeScript types from Kingdom data
// Generated by scripts/generate-types.py
// DO NOT EDIT MANUALLY - Run 'npm run generate-types' to update

/**
 * Kingdom Event skill with description
 */
export interface EventSkill {
  skill: KingdomSkill;
  description: string;
}

/**
 * All available kingdom skills
 */
export type KingdomSkill = 
  | "acrobatics"
  | "arcana"
  | "athletics"
  | "crafting"
  | "deception"
  | "diplomacy"
  | "intimidation"
  | "lore"
  | "medicine"
  | "nature"
  | "occultism"
  | "performance"
  | "religion"
  | "society"
  | "stealth"
  | "survival"
  | "thievery";

/**
 * Event trait types
 */
export type EventTrait = 
  | "beneficial"
  | "dangerous"
  | "ongoing";

/**
 * Modifier selector types (what the modifier affects)
 */
export type ModifierSelector = 
;

/**
 * Event location types
 */
export type EventLocation = 
;

/**
 * Event tier types (events use 'event', incidents vary)
 */
export type EventTier = 'event' | 'minor' | 'moderate' | 'major' | number;

/**
 * Resource types that can be modified
 */
export type ResourceType = 'gold' | 'food' | 'lumber' | 'stone' | 'ore' | 'luxuries' | 'unrest' | 'fame' | 'imprisoned_unrest' | 'damage_structure';

/**
 * Import and re-export typed modifier system
 * (Hand-written in modifiers.ts, not auto-generated)
 * 
 * The typed modifier system provides:
 * - StaticModifier (fixed numeric values)
 * - DiceModifier (dice formulas)
 * - ChoiceModifier (player choice of resource)
 * - Type guards for safe discrimination
 */
import type { 
  EventModifier, 
  ModifierDuration,
  StaticModifier,
  DiceModifier,
  ChoiceModifier,
  DiceValue
} from './modifiers';

export type { 
  EventModifier, 
  ModifierDuration,
  StaticModifier,
  DiceModifier,
  ChoiceModifier,
  DiceValue
};

/**
 * Event outcome with message and modifiers
 */
export interface EventOutcome {
  msg: string;
  endsEvent?: boolean;
  modifiers?: EventModifier[];
  manualEffects?: string[];  // Optional manual effects to display
}

/**
 * Event effects (outcomes for different degrees of success)
 */
export interface EventEffects {
  criticalSuccess?: EventOutcome;
  success?: EventOutcome;
  failure?: EventOutcome;
  criticalFailure?: EventOutcome;
}

/**
 * Kingdom Event data structure (simplified, unified format)
 */
export interface KingdomEvent {
  id: string;
  name: string;  // Display name for UI
  tier: EventTier;
  description: string;
  skills?: EventSkill[];
  effects: EventEffects;
  traits?: EventTrait[];  // Event traits (beneficial, dangerous, ongoing)
}

/**
 * Kingdom Incident (same structure as event)
 */
export interface KingdomIncident extends KingdomEvent {
  tier: 'minor' | 'moderate' | 'major';
}

/**
 * Type guard to check if an object is a KingdomEvent
 */
export function isKingdomEvent(obj: any): obj is KingdomEvent {
  return (
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    typeof obj.name === 'string' &&
    typeof obj.description === 'string' &&
    typeof obj.effects === 'object'
  );
}

/**
 * Helper to generate display name from event ID
 */
export function getEventDisplayName(event: KingdomEvent): string {
  return event.id
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}
