// Auto-generated TypeScript types from Kingdom data
// Generated by scripts/generate-types.py
// DO NOT EDIT MANUALLY - Run 'npm run generate-types' to update

/**
 * Kingdom Event skill with description
 */
export interface EventSkill {
  skill: KingdomSkill;
  description: string;
}

/**
 * All available kingdom skills
 */
export type KingdomSkill = 
  | "acrobatics"
  | "arcana"
  | "athletics"
  | "crafting"
  | "deception"
  | "diplomacy"
  | "intimidation"
  | "lore"
  | "medicine"
  | "nature"
  | "occultism"
  | "performance"
  | "religion"
  | "society"
  | "stealth"
  | "survival"
  | "thievery";

/**
 * Event trait types
 */
export type EventTrait = 
  | "beneficial"
  | "dangerous"
  | "ongoing";

/**
 * Modifier selector types (what the modifier affects)
 */
export type ModifierSelector = never;  // Currently unused, reserved for future use

/**
 * Event location types
 */
export type EventLocation = never;  // Currently unused, reserved for future use

/**
 * Event tier types (events use 'event', incidents vary)
 */
export type EventTier = 'event' | 'minor' | 'moderate' | 'major' | number;

/**
 * Resource types that can be modified
 */
export type ResourceType = 'gold' | 'food' | 'lumber' | 'stone' | 'ore' | 'luxuries' | 'unrest' | 'fame' | 'imprisoned_unrest' | 'damage_structure';

/**
 * Modifier duration types (can be string or number for turn count)
 */
export type ModifierDuration = 'immediate' | 'ongoing' | 'permanent' | number;

/**
 * Event modifier details (unified format)
 */
export interface EventModifier {
  resource: ResourceType;
  value: number | string;  // Can be number or dice formula (e.g., "1d4")
  type?: string;  // Optional modifier type (e.g., "untyped")
  duration?: ModifierDuration;  // Optional duration
}

/**
 * Complex action that can be auto-executed
 */
export interface ComplexAction {
  type: 'damage_structure' | 'destroy_structure' | 'create_army' | 
        'claim_hex' | 'remove_condition' | 'add_condition';
  [key: string]: any;  // Type-specific parameters
}

/**
 * Event outcome with message and modifiers
 */
export interface EventOutcome {
  msg: string;
  endsEvent?: boolean;
  modifiers?: EventModifier[];
  manualEffects?: string[];  // Optional manual effects to display
  complexActions?: ComplexAction[];  // Optional auto-executable actions
}

/**
 * Event effects (outcomes for different degrees of success)
 */
export interface EventEffects {
  criticalSuccess?: EventOutcome;
  success?: EventOutcome;
  failure?: EventOutcome;
  criticalFailure?: EventOutcome;
}

/**
 * Kingdom Event data structure (simplified, unified format)
 */
export interface KingdomEvent {
  id: string;
  name: string;  // Display name for UI
  tier: EventTier;
  description: string;
  skills?: EventSkill[];
  effects: EventEffects;
  traits?: EventTrait[];  // Event traits (beneficial, dangerous, ongoing)
}

/**
 * Kingdom Incident (same structure as event)
 */
export interface KingdomIncident extends KingdomEvent {
  tier: 'minor' | 'moderate' | 'major';
}

/**
 * Type guard to check if an object is a KingdomEvent
 */
export function isKingdomEvent(obj: any): obj is KingdomEvent {
  return (
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    typeof obj.name === 'string' &&
    typeof obj.description === 'string' &&
    typeof obj.effects === 'object'
  );
}

/**
 * Helper to generate display name from event ID
 */
export function getEventDisplayName(event: KingdomEvent): string {
  return event.id
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

/**
 * Resolution data computed by UI and passed to controllers
 * This is the complete, ready-to-apply data after all user interactions
 */
export interface ResolutionData {
  /** Final numeric modifiers (already rolled, choices resolved) */
  numericModifiers: Array<{ resource: ResourceType; value: number }>;
  
  /** Manual effects to display (not auto-executed) */
  manualEffects: string[];
  
  /** Complex actions to auto-execute */
  complexActions: ComplexAction[];
}

/**
 * Helper to generate display name from incident ID
 */
export function getIncidentDisplayName(incident: KingdomIncident): string {
  return incident.id
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}
