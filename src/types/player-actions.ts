// Auto-generated TypeScript types for Player Actions
// Generated by scripts/generate-types.py
// DO NOT EDIT MANUALLY - Run 'npm run generate-types' to update

import type { KingdomSkill } from './events';

/**
 * Player action skill with description
 */
export interface ActionSkill {
  skill: KingdomSkill;
  description: string;
}

/**
 * Action category types
 */
export type ActionCategory = 
  | "borders"
  | "economic-resources"
  | "expand-borders"
  | "foreign-affairs"
  | "military"
  | "military-operations"
  | "uphold-stability"
  | "urban-planning";

/**
 * Action effect modifiers (simple key-value pairs)
 */
export interface ActionModifiers {
  [key: string]: number | boolean | string;
}

/**
 * Action effect with description and modifiers
 */
export interface ActionEffect {
  description: string;
  modifiers?: ActionModifiers;
}

/**
 * Action effects for different outcomes
 */
export interface ActionEffects {
  criticalSuccess?: ActionEffect;
  success?: ActionEffect;
  failure?: ActionEffect;
  criticalFailure?: ActionEffect;
}

/**
 * Resource costs for an action
 */
export interface ActionCosts {
  gold?: number;
  food?: number;
  lumber?: number;
  stone?: number;
  ore?: number;
  luxuries?: number;
  resources?: number;
}

/**
 * Player Action data structure
 */
export interface PlayerAction {
  id: string;
  name: string;
  category: ActionCategory;
  brief: string;
  description: string;
  skills?: ActionSkill[];
  effects: ActionEffects;
  failureCausesUnrest?: boolean;
  costs?: ActionCosts;
  special?: string;
}

/**
 * Type guard to check if an object is a PlayerAction
 */
export function isPlayerAction(obj: any): obj is PlayerAction {
  return (
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    typeof obj.name === 'string' &&
    typeof obj.category === 'string' &&
    typeof obj.effects === 'object'
  );
}
